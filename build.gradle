apply plugin: 'java'
apply plugin: 'idea' //run idea to resolve dependencies in intellij
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'io.github.subiyacryolite'
version = '1.170625'
archivesBaseName = project.name
description = 'A dynamic, cross platform, high performance, ORM data-mapper. Designed to assist in rapid development and data mining'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url "https://maven.atlassian.com/3rdparty/" }
    maven { url "http://clojars.org/repo/" }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.xerial:sqlite-jdbc:3.16.1'
    testCompile 'com.microsoft.sqlserver:sqljdbc4:4.0'
    testCompile 'org.postgresql:postgresql:42.0.0'
    testCompile 'mysql:mysql-connector-java:6.0.6'
}

jar {
    from configurations.runtime
    manifest {
        attributes(
                "Implementation-Title": "Jenesis Data Store",
                "Implementation-Version": project.version,
                "Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
        )
    }
}

test {
    //prevent problems with TravisCI
    exclude 'io/github/subiyacryolite/jds/**'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives javadocJar, sourceJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: hasProperty('ossrhUsername') ? ossrhUsername : '', password: hasProperty('ossrhPassword') ? ossrhPassword : '')
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: hasProperty('ossrhUsername') ? ossrhUsername : '', password: hasProperty('ossrhPassword') ? ossrhPassword : '')
            }
            pom.project {
                name 'Jenesis Data Store'
                packaging 'jar'
                description = project.description
                url 'https://github.com/SubiyaCryolite/Jenesis-Data-Store'
                scm {
                    connection 'scm:git:git@github.com:SubiyaCryolite/Jenesis-Data-Store.git'
                    developerConnection 'scm:git:git@github.com:SubiyaCryolite/Jenesis-Data-Store.git'
                    url 'https://github.com/SubiyaCryolite/Jenesis-Data-Store'
                }
                licenses {
                    license {
                        name 'The 3-Clause BSD License'
                        url 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                developers {
                    developer {
                        id 'SubiyaCryolite'
                        name 'Ifunga Ndana'
                        email 'ifungandana@gmail.com'
                    }
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}