buildscript {

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }
}

apply plugin: "maven"
apply plugin: "signing"
apply plugin: "kotlin"
apply plugin: "org.jetbrains.dokka"
apply plugin: "io.codearte.nexus-staging"

group = "io.github.subiyacryolite"
version = "12.0.6-SNAPSHOT"
archivesBaseName = project.name
description = "A dynamic, cross platform, high performance, ORM data-mapper. Designed to assist in rapid development and data mining"
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

project.ext.jacksonVersion = "2.9.9"
project.ext.kotlinVersion = "1.3.41"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://maven.atlassian.com/3rdparty/" }
    maven { url "http://clojars.org/repo/" }
}

dependencies {
    implementation "org.openjfx:javafx-base:11:win"/*We specify win though in reality all we care about is JavaFX bean classes. There are no OS dependencies*/
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.slf4j:slf4j-jdk14:1.8.0-beta4"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    testImplementation "org.xerial:sqlite-jdbc:3.27.2.1"
    testImplementation "com.microsoft.sqlserver:mssql-jdbc:7.0.0.jre8"
    testImplementation "org.postgresql:postgresql:42.2.5"
    testImplementation "mysql:mysql-connector-java:8.0.13"
    testImplementation "org.mariadb.jdbc:mariadb-java-client:2.4.0"
    testImplementation "com.oracle:ojdbc6:12.1.0.1-atlassian-hosted"
    testImplementation "com.zaxxer:HikariCP:3.3.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.2"
}

jar {
    from configurations.runtime
    manifest {
        attributes(
                "Implementation-Title": "Jenesis Data Store",
                "Implementation-Version": project.version,
                "Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
        )
    }
}

test {
    //prevent problems with TravisCI
    exclude "**"
}

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from dokka
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

artifacts {
    archives javadocJar, sourceJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

if (project.hasProperty("ossrhUsername")) {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name "Jenesis Data Store"
                    packaging "jar"
                    description = project.description
                    url "https://github.com/SubiyaCryolite/jds"
                    scm {
                        connection "scm:git:git@github.com:SubiyaCryolite/jds.git"
                        developerConnection "scm:git:git@github.com:SubiyaCryolite/jds.git"
                        url "https://github.com/SubiyaCryolite/jds"
                    }
                    licenses {
                        license {
                            name "The 3-Clause BSD License"
                            url "https://opensource.org/licenses/BSD-3-Clause"
                        }
                    }
                    developers {
                        developer {
                            id "SubiyaCryolite"
                            name "Ifunga Ndana"
                            email "ifungandana@gmail.com"
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "io.github.subiyacryolite"
    stagingProfileId = "57cb63f09e7fd5"
}